[
  {
    "objectID": "dv.html",
    "href": "dv.html",
    "title": "Data Visualizations",
    "section": "",
    "text": "This data is downloaded using Spotify API."
  },
  {
    "objectID": "dv.html#data",
    "href": "dv.html#data",
    "title": "Data Visualizations",
    "section": "",
    "text": "This data is downloaded using Spotify API."
  },
  {
    "objectID": "dv.html#spotify-audio-features",
    "href": "dv.html#spotify-audio-features",
    "title": "Data Visualizations",
    "section": "Spotify Audio Features",
    "text": "Spotify Audio Features\nFor every track on their platform, Spotify provides data for thirteen Audio Features.The Spotify Web API developer guidehttps://developer.spotify.com/discover/ defines them as follows:\nDanceability: Describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity.\nValence: Describes the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).\nEnergy: Represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale.\nTempo: The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece, and derives directly from the average beat duration.\nLoudness: The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks.\nspeechiness: This detects the presence of spoken words in a track. The more exclusively instrum-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value.\nInstrumentalness: Predicts whether a track contains no vocals. “Ooh” and “aah” sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly “vocal”.\nLiveness: Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live.\nAcousticness: A confidence measure from 0.0 to 1.0 of whether the track is acoustic.\nKey: The estimated overall key of the track. Integers map to pitches using standard Pitch Class notation . E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on.\nMode: Indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.\nDuration: The duration of the track in milliseconds.\nTime Signature: An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure)."
  },
  {
    "objectID": "dv.html#data-visualizations",
    "href": "dv.html#data-visualizations",
    "title": "Data Visualizations",
    "section": "Data Visualizations",
    "text": "Data Visualizations\n\n\nCode\ndf5&lt;-read.csv(\"Artists_TS_B.csv\") #df\\$album_release_year\\&lt;-as.Date(\"%y\")\n\ndf5$artist_name&lt;-as.factor(df5$artist_name)\n\ndf&lt;-df5\n\n#p&lt;-ggplot(df5, aes(x = danceability, y = speechiness, color = artist_name)) + geom_point() + ggtitle(\"Wages and Services by industry in the US\")\n\n#ggplotly(p)"
  },
  {
    "objectID": "dv.html#music-properties-of-beyoncé-and-taylor-swifts-songs",
    "href": "dv.html#music-properties-of-beyoncé-and-taylor-swifts-songs",
    "title": "Data Visualizations",
    "section": "Music properties of Beyoncé and Taylor Swift’s songs",
    "text": "Music properties of Beyoncé and Taylor Swift’s songs\n\n\nCode\n# Aggregate data to get average values for each year and artist\nagg_df &lt;- aggregate(cbind(danceability, speechiness, acousticness, liveness) ~ album_release_year + artist_name, data = df, FUN = mean)\n\n# Define custom colors for Beyoncé and Taylor Swift\ncustom_colors &lt;- c(\"Beyoncé\" = \"blue\", \"Taylor Swift\" = \"red\")\n\n# Plot danceability bubble chart\nfig1 &lt;- plot_ly(agg_df, x = ~album_release_year, y = ~danceability, \n                size = ~danceability,\n                color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6),\n                colors = custom_colors,\n                legendgroup = ~artist_name ,\n                showlegend = FALSE\n  ) |&gt;\n  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE))\n\n\n\n# Plot speechiness bubble chart\nfig2 &lt;- plot_ly(agg_df, x = ~album_release_year, y = ~speechiness, \n                size = ~speechiness, color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), \n                colors = custom_colors, legendgroup = ~artist_name,\n                showlegend = FALSE) |&gt;\n  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE)) \n\n# Plot acousticness bubble chart\nfig3 &lt;- plot_ly(agg_df, x = ~album_release_year, y =  ~acousticness, \n                size = ~acousticness, color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), \n                colors = custom_colors,\n                legendgroup = ~artist_name,\n                showlegend = FALSE\n  ) |&gt;\n  layout(xaxis = list(showgrid = FALSE, zeroline=FALSE),yaxis = list(showgrid = FALSE, zeroline=FALSE)) \n\n# Plot liveness bubble chart\nfig4 &lt;- plot_ly(agg_df, x = ~album_release_year, y = ~liveness, \n                size = ~liveness, color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), \n                colors = custom_colors,\n                legendgroup = ~artist_name,\n                showlegend = TRUE\n  ) |&gt;\n  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE)) \n\n# Combine subplots\n#subplot(fig1, fig2, fig3, fig4, nrows = 2, shareX = TRUE)\n\n# fig &lt;- make_subplots(rows=2,\n#                     cols=2,\n#                     #print_grid=True,\n#                     vertical_spacing=0.1,\n#                     horizontal_spacing=0.085,\n#                     x_title='Your master x-title',\n#                     y_title='Your master y-title')\n\nfig &lt;- subplot(fig1, fig2, fig3, fig4, nrows = 2, shareX=TRUE, titleX=FALSE)\n\n#fig &lt;- subplot(fig1, fig2, nrows=2, shareX = TRUE, showlegend=TRUE)\n#%&gt;% layout(title = \"Average Music Properties of Beyoncé and Taylor Swift's Songs\")\n\nannotations &lt;- list(\n  list(\n    x = 0.2,\n    y = 1.0,\n    text = \"Danceability\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x = 0.8,\n    y = 1,\n    text = \"Speechiness\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x = 0.2,\n    y = 0.45,\n    text = \"Acousticness\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x = 0.8,\n    y = 0.45,\n    text = \"Liveness\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x=0.5,\n    y=-0.035,\n    text=\"Release Year\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"bottom\",\n    yanchor = \"top\",\n    showarrow = FALSE,\n    font=list(size=16)\n  )\n)\n\nfig &lt;- fig |&gt; layout(annotations = annotations)\nfig"
  },
  {
    "objectID": "dv.html#this-is-a-bar-grapgh-for-comparison",
    "href": "dv.html#this-is-a-bar-grapgh-for-comparison",
    "title": "Data Visualizations",
    "section": "This is a bar grapgh for Comparison",
    "text": "This is a bar grapgh for Comparison"
  },
  {
    "objectID": "dv.html#tempo-of-beyoncé-and-taylor-swifts-songs-over-the-years",
    "href": "dv.html#tempo-of-beyoncé-and-taylor-swifts-songs-over-the-years",
    "title": "Data Visualizations",
    "section": "Tempo of Beyoncé and Taylor Swift’s songs over the Years",
    "text": "Tempo of Beyoncé and Taylor Swift’s songs over the Years\n\n\nCode\n# Your filtering code\nyears_to_keep &lt;- c(2006, 2008, 2010, 2014, 2019, 2020, 2022)\nfiltered_df &lt;- subset(df, album_release_year %in% years_to_keep)\n\n # Aggregate tempo values by artist_name and album_release_year\n  agg_df &lt;- aggregate(tempo ~ artist_name + album_release_year, data = filtered_df, FUN = mean)\n  \n  # Create the animated bar plot\n  fig &lt;- plot_ly(agg_df,\n                 x = ~artist_name,\n                 y = ~tempo, \n                 color = ~artist_name, \n                 type = 'bar',\n                 frame = ~album_release_year, \n                 text = ~artist_name, \n                 hoverinfo = \"text\")\n  \n  # Add animation button and slider\n  fig &lt;- fig %&gt;% animation_button(\n    x = 1, xanchor = \"right\", y = 0, yanchor = \"bottom\"\n  )\n  fig &lt;- fig %&gt;% animation_slider(\n    currentvalue = list(prefix = \"YEAR \", font = list(color=\"red\"))\n  )\n  \n  # Add title, x-axis label, and y-axis label\nfig &lt;- fig %&gt;% layout(\n  title = \"Tempo of Beyoncé and Taylor Swift’s songs over the Years\",\n  xaxis = list(title = \"Album Release Year\"),\n  yaxis = list(title = \"Tempo\")\n)\n\n  fig"
  },
  {
    "objectID": "dv.html#number-of-albums-released-eached-year-by-each-artist",
    "href": "dv.html#number-of-albums-released-eached-year-by-each-artist",
    "title": "Data Visualizations",
    "section": "Number of Albums released eached Year by each Artist",
    "text": "Number of Albums released eached Year by each Artist"
  },
  {
    "objectID": "dv.html#most-frequently-used-words-in-track-names",
    "href": "dv.html#most-frequently-used-words-in-track-names",
    "title": "Data Visualizations",
    "section": "Most frequently used words in track names",
    "text": "Most frequently used words in track names\n\n\nCode\nlibrary(dplyr)\nlibrary(wordcloud2)\nlibrary(tidyr)\nlibrary(tidytext)\n\n\ndf2&lt;-df\n\n\n# Remove \"(Taylor's Version)\" from track names\ndf2$track_name &lt;- gsub(\"\\\\(Taylor's Version\\\\)|Taylor’s Version|\\\\(From The Vault\\\\)\", \"\", df2$track_name)\n\n# Print cleaned track names\nhead(df2)\n\n\n  X  artist_name Valence danceability energy loudness speechiness acousticness\n1 1 Taylor Swift   0.685        0.757  0.610   -4.840      0.0327     0.009420\n2 2 Taylor Swift   0.701        0.733  0.733   -5.376      0.0670     0.088500\n3 3 Taylor Swift   0.305        0.511  0.822   -4.785      0.0397     0.000421\n4 4 Taylor Swift   0.206        0.545  0.885   -5.968      0.0447     0.000537\n5 5 Taylor Swift   0.520        0.588  0.721   -5.579      0.0317     0.000656\n6 6 Taylor Swift   0.917        0.636  0.808   -5.693      0.0729     0.012100\n  liveness   tempo                  track_name                       album_name\n1   0.3670 116.998        Welcome To New York  1989 (Taylor's Version) [Deluxe]\n2   0.1680  96.057                Blank Space  1989 (Taylor's Version) [Deluxe]\n3   0.0899  94.868                      Style  1989 (Taylor's Version) [Deluxe]\n4   0.3850  92.021           Out Of The Woods  1989 (Taylor's Version) [Deluxe]\n5   0.1310  96.997 All You Had To Do Was Stay  1989 (Taylor's Version) [Deluxe]\n6   0.3590 160.058               Shake It Off  1989 (Taylor's Version) [Deluxe]\n  album_release_year\n1               2023\n2               2023\n3               2023\n4               2023\n5               2023\n6               2023\n\n\nCode\n# Filter data for Taylor Swift and Beyoncé\ntaylor_swift_data &lt;- df2 %&gt;% \n  filter(artist_name == \"Taylor Swift\")\n\nbeyonce_data &lt;- df2 %&gt;% \n  filter(artist_name == \"Beyoncé\")\n\n# Tokenize track names and count word frequencies for Taylor Swift\ntaylor_swift_word_freq &lt;- taylor_swift_data %&gt;%\n  unnest_tokens(word, track_name) %&gt;%\n  count(word) %&gt;%\n  arrange(desc(n))\n\n# Tokenize track names and count word frequencies for Beyoncé\nbeyonce_word_freq &lt;- beyonce_data %&gt;%\n  unnest_tokens(word, track_name) %&gt;%\n  count(word) %&gt;%\n  arrange(desc(n))"
  },
  {
    "objectID": "dv.html#word-cloud-taylor-swift",
    "href": "dv.html#word-cloud-taylor-swift",
    "title": "Data Visualizations",
    "section": "Word cloud Taylor Swift",
    "text": "Word cloud Taylor Swift\n\n\nCode\n# Create word clouds for Taylor Swift and Beyoncé\n# Words to be removed\nwords_to_remove &lt;- c(\"the\", \"this\", \"to\", \"is\", \"are\")\n\n# Filter out the words to be removed from your word frequency data\ntaylor_swift_word_freq_filtered &lt;- taylor_swift_word_freq[!taylor_swift_word_freq[,1] %in% words_to_remove, ]\n\n# Set up your word cloud parameters\nts_size &lt;- 1\nts_bg_color &lt;- \"white\"\nts_color &lt;- ifelse(taylor_swift_word_freq_filtered[, 2] &gt; 8, 'red', 'skyblue')\n\n# Convert your filtered data to a data frame\nts_data &lt;- as.data.frame(taylor_swift_word_freq_filtered)\nts_dataOut &lt;- ts_data[,1:2]\nnames(ts_dataOut) &lt;- c(\"name\", \"freq\")\n\n# Calculate weight factor\nweightFactor &lt;- ts_size * 180 / max(ts_dataOut$freq)\n\n# Define hover function and widget size\nhoverFunction &lt;- NULL\nwidgetsize &lt;- NULL\n\n# Set up word cloud settings\nts_settings &lt;- list(\n  word = ts_dataOut$name,\n  freq = ts_dataOut$freq,\n  fontFamily = 'Segoe UI',\n  fontWeight = 'bold',\n  color =  ts_color,\n  minSize =  0,\n  weightFactor = weightFactor,\n  backgroundColor = ts_bg_color,\n  gridSize =  0,\n  minRotation = -pi/4,\n  maxRotation = pi/4,\n  shuffle = TRUE,\n  rotateRatio = 0.4,\n  shape = 'circle',\n  ellipticity = 0.65,\n  figBase64 = NULL,\n  hover = htmlwidgets::JS(hoverFunction)\n)\n\n# Create the word cloud\nhtmlwidgets::createWidget(\"wordcloud2\", ts_settings,\n                          width = widgetsize[1],\n                          height = widgetsize[2],\n                          sizingPolicy = htmlwidgets::sizingPolicy(\n                            viewer.padding = 0,\n                            browser.padding = 0,\n                            browser.fill = TRUE\n                          ))"
  },
  {
    "objectID": "dv.html#word-cloud-beyonce",
    "href": "dv.html#word-cloud-beyonce",
    "title": "Data Visualizations",
    "section": "Word cloud Beyonce",
    "text": "Word cloud Beyonce\n\n\nCode\n#wc2_beyonce &lt;- wordcloud2(beyonce_word_freq, size = 1, backgroundColor = \"white\", color = ifelse(beyonce_word_freq[, 2] &gt; 8, 'purple', 'green'))\n#wordcloud2::wordcloud2Output(\"wcb\", width=\"100%\", height = \"400px\")\n#wordcloud2::renderWordcloud2(wc2_beyonce)\n#wc2_beyonce\n# Words to be removed\nwords_to_remove &lt;- c(\"on\", \"the\", \"in\")\n\n# Filter out the words to be removed from your word frequency data\nbeyonce_word_freq_filtered &lt;- beyonce_word_freq[!beyonce_word_freq[,1] %in% words_to_remove, ]\n\n# Set up your word cloud parameters\nb_size &lt;- 1\nb_bg_color &lt;- \"white\"\nts_color &lt;- ifelse(beyonce_word_freq_filtered[, 2] &gt; 8, 'purple', 'green')\n\n# Convert your filtered data to a data frame\nb_data &lt;- as.data.frame(beyonce_word_freq_filtered)\nb_dataOut &lt;- b_data[,1:2]\nnames(b_dataOut) &lt;- c(\"name\", \"freq\")\n\n# Calculate weight factor\nb_weightFactor &lt;- b_size * 180 / max(b_dataOut$freq)\n\n# Define hover function and widget size\nhoverFunction &lt;- NULL\nwidgetsize &lt;- NULL\n\n# Set up word cloud settings\nb_settings &lt;- list(\n  word = b_dataOut$name,\n  freq = b_dataOut$freq,\n  fontFamily = 'Segoe UI',\n  fontWeight = 'bold',\n  color =  ts_color,\n  minSize =  0,\n  weightFactor = b_weightFactor,\n  backgroundColor = b_bg_color,\n  gridSize =  0,\n  minRotation = -pi/4,\n  maxRotation = pi/4,\n  shuffle = TRUE,\n  rotateRatio = 0.4,\n  shape = 'circle',\n  ellipticity = 0.65,\n  figBase64 = NULL,\n  hover = htmlwidgets::JS(hoverFunction)\n)\n\n# Create the word cloud\nhtmlwidgets::createWidget(\"wordcloud2\", b_settings,\n                          width = widgetsize[1],\n                          height = widgetsize[2],\n                          sizingPolicy = htmlwidgets::sizingPolicy(\n                            viewer.padding = 0,\n                            browser.padding = 0,\n                            browser.fill = TRUE\n                          ))\n\n\n\n\n\n\n\n\nCode\n## Word cloud Beyonce - A different way to obtain wordcloud\n\n\nlibrary(wordcloud)\n\n# Assuming taylor_swift_word_freq is a data frame with two columns: word and n\n\n# Create a color palette based on frequencies\npal &lt;- colorRampPalette(c(\"skyblue\", \"purple\"))(length(unique(beyonce_word_freq$n)))\n\n# Create a word cloud with custom colors\nwordcloud(words = beyonce_word_freq$word,\n          freq =beyonce_word_freq$n,\n          scale = c(12, 0.05),\n          random.order = FALSE,\n          random.color = FALSE,\n          rot.per = 0.25,\n          colors = pal)"
  },
  {
    "objectID": "plotly_spotify_plots.html",
    "href": "plotly_spotify_plots.html",
    "title": "Plotly Visualizations",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\ndf &lt;- read.csv(\"Artists_TS_B.csv\")\ndf$artist_name &lt;- as.factor(df$artist_name)\n\n\n# Aggregate data to get average values for each year and artist\nagg_df &lt;- aggregate(cbind(danceability, speechiness, acousticness, liveness) ~ album_release_year + artist_name, data = df, FUN = mean)\n\n# Define custom colors for Beyoncé and Taylor Swift\ncustom_colors &lt;- c(\"Beyoncé\" = \"blue\", \"Taylor Swift\" = \"red\")\n\n# Plot danceability bubble chart\nfig1 &lt;- plot_ly(agg_df, x = ~album_release_year, y = ~danceability, \n                size = ~danceability,\n                color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6),\n                colors = custom_colors,\n                legendgroup = ~artist_name ,\n                showlegend = FALSE\n  ) |&gt;\n  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE))\n\n\n# Plot speechiness bubble chart\nfig2 &lt;- plot_ly(agg_df, x = ~album_release_year, y = ~speechiness, \n                size = ~speechiness, color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), \n                colors = custom_colors, legendgroup = ~artist_name,\n                showlegend = FALSE) |&gt;\n  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE)) \n\n# Plot acousticness bubble chart\nfig3 &lt;- plot_ly(agg_df, x = ~album_release_year, y =  ~acousticness, \n                size = ~acousticness, color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), \n                colors = custom_colors,\n                legendgroup = ~artist_name,\n                showlegend = FALSE\n  ) |&gt;\n  layout(xaxis = list(showgrid = FALSE, zeroline=FALSE),yaxis = list(showgrid = FALSE, zeroline=FALSE)) \n\n# Plot liveness bubble chart\nfig4 &lt;- plot_ly(agg_df, x = ~album_release_year, y = ~liveness, \n                size = ~liveness, color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), \n                colors = custom_colors,\n                legendgroup = ~artist_name,\n                showlegend = TRUE\n  ) |&gt;\n  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE)) \n\n# Combine subplots\n#subplot(fig1, fig2, fig3, fig4, nrows = 2, shareX = TRUE)\n\n# fig &lt;- make_subplots(rows=2,\n#                     cols=2,\n#                     #print_grid=True,\n#                     vertical_spacing=0.1,\n#                     horizontal_spacing=0.085,\n#                     x_title='Your master x-title',\n#                     y_title='Your master y-title')\n\nfig &lt;- subplot(fig1, fig2, fig3, fig4, nrows = 2, shareX=TRUE, titleX=FALSE)\n\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\n\n#fig &lt;- subplot(fig1, fig2, nrows=2, shareX = TRUE, showlegend=TRUE)\n#%&gt;% layout(title = \"Average Music Properties of Beyoncé and Taylor Swift's Songs\")\n\nannotations &lt;- list(\n  list(\n    x = 0.2,\n    y = 1.0,\n    text = \"Danceability\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x = 0.8,\n    y = 1,\n    text = \"Speechiness\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x = 0.2,\n    y = 0.45,\n    text = \"Acousticness\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x = 0.8,\n    y = 0.45,\n    text = \"Liveness\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x=0.5,\n    y=-0.035,\n    text=\"Release Year\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"bottom\",\n    yanchor = \"top\",\n    showarrow = FALSE,\n    font=list(size=16)\n  )\n)\n\nfig &lt;- fig |&gt; layout(annotations = annotations)\nfig"
  },
  {
    "objectID": "dv1.html",
    "href": "dv1.html",
    "title": "Data Visualizations",
    "section": "",
    "text": "This data is downloaded using Spotify API."
  },
  {
    "objectID": "dv1.html#data",
    "href": "dv1.html#data",
    "title": "Data Visualizations",
    "section": "",
    "text": "This data is downloaded using Spotify API."
  },
  {
    "objectID": "dv1.html#spotify-audio-features",
    "href": "dv1.html#spotify-audio-features",
    "title": "Data Visualizations",
    "section": "Spotify Audio Features",
    "text": "Spotify Audio Features\nFor every track on their platform, Spotify provides data for thirteen Audio Features.The Spotify Web API developer guidehttps://developer.spotify.com/discover/ defines them as follows:\nDanceability: Describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity.\nValence: Describes the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).\nEnergy: Represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale.\nTempo: The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece, and derives directly from the average beat duration.\nLoudness: The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks.\nspeechiness: This detects the presence of spoken words in a track. The more exclusively instrum-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value.\nInstrumentalness: Predicts whether a track contains no vocals. “Ooh” and “aah” sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly “vocal”.\nLiveness: Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live.\nAcousticness: A confidence measure from 0.0 to 1.0 of whether the track is acoustic.\nKey: The estimated overall key of the track. Integers map to pitches using standard Pitch Class notation . E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on.\nMode: Indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.\nDuration: The duration of the track in milliseconds.\nTime Signature: An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure)."
  },
  {
    "objectID": "dv1.html#data-visualizations",
    "href": "dv1.html#data-visualizations",
    "title": "Data Visualizations",
    "section": "Data Visualizations",
    "text": "Data Visualizations\n\n\nCode\ndf5&lt;-read.csv(\"Artists_TS_B.csv\") #df\\$album_release_year\\&lt;-as.Date(\"%y\")\n\ndf5$artist_name&lt;-as.factor(df5$artist_name)\n\ndf&lt;-df5\n\n#p&lt;-ggplot(df5, aes(x = danceability, y = speechiness, color = artist_name)) + geom_point() + ggtitle(\"Wages and Services by industry in the US\")\n\n#ggplotly(p)"
  },
  {
    "objectID": "dv1.html#music-properties-of-beyoncé-and-taylor-swifts-songs",
    "href": "dv1.html#music-properties-of-beyoncé-and-taylor-swifts-songs",
    "title": "Data Visualizations",
    "section": "Music properties of Beyoncé and Taylor Swift’s songs",
    "text": "Music properties of Beyoncé and Taylor Swift’s songs\n\n\nCode\n# Aggregate data to get average values for each year and artist\nagg_df &lt;- aggregate(cbind(danceability, speechiness, acousticness, liveness) ~ album_release_year + artist_name, data = df, FUN = mean)\n\n# Define custom colors for Beyoncé and Taylor Swift\ncustom_colors &lt;- c(\"Beyoncé\" = \"blue\", \"Taylor Swift\" = \"red\")\n\n# Plot danceability bubble chart\nfig1 &lt;- plot_ly(agg_df, x = ~album_release_year, y = ~danceability, \n                size = ~danceability,\n                color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6),\n                colors = custom_colors,\n                legendgroup = ~artist_name ,\n                showlegend = FALSE\n  ) |&gt;\n  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE))\n# Plot speechiness bubble chart\nfig2 &lt;- plot_ly(agg_df, x = ~album_release_year, y = ~speechiness, \n                size = ~speechiness, color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), \n                colors = custom_colors, legendgroup = ~artist_name,\n                showlegend = FALSE) |&gt;\n  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE)) \n\n# Plot acousticness bubble chart\nfig3 &lt;- plot_ly(agg_df, x = ~album_release_year, y =  ~acousticness, \n                size = ~acousticness, color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), \n                colors = custom_colors,\n                legendgroup = ~artist_name,\n                showlegend = FALSE\n  ) |&gt;\n  layout(xaxis = list(showgrid = FALSE, zeroline=FALSE),yaxis = list(showgrid = FALSE, zeroline=FALSE)) \n\n# Plot liveness bubble chart\nfig4 &lt;- plot_ly(agg_df, x = ~album_release_year, y = ~liveness, \n                size = ~liveness, color = ~artist_name, \n                type = 'scatter', mode = 'markers', \n                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), \n                colors = custom_colors,\n                legendgroup = ~artist_name,\n                showlegend = TRUE\n  ) |&gt;\n  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE)) \n\n# Combine subplots\n#subplot(fig1, fig2, fig3, fig4, nrows = 2, shareX = TRUE)\n\n# fig &lt;- make_subplots(rows=2,\n#                     cols=2,\n#                     #print_grid=True,\n#                     vertical_spacing=0.1,\n#                     horizontal_spacing=0.085,\n#                     x_title='Your master x-title',\n#                     y_title='Your master y-title')\n\nfig &lt;- subplot(fig1, fig2, fig3, fig4, nrows = 2, shareX=TRUE, titleX=FALSE)\n\n#fig &lt;- subplot(fig1, fig2, nrows=2, shareX = TRUE, showlegend=TRUE)\n#%&gt;% layout(title = \"Average Music Properties of Beyoncé and Taylor Swift's Songs\")\n\nannotations &lt;- list(\n  list(\n    x = 0.2,\n    y = 1.0,\n    text = \"Danceability\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x = 0.8,\n    y = 1,\n    text = \"Speechiness\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x = 0.2,\n    y = 0.45,\n    text = \"Acousticness\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x = 0.8,\n    y = 0.45,\n    text = \"Liveness\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"center\",\n    yanchor = \"bottom\",\n    showarrow = FALSE\n  ),\n  list(\n    x=0.5,\n    y=-0.035,\n    text=\"Release Year\",\n    xref = \"paper\",\n    yref = \"paper\",\n    xanchor = \"bottom\",\n    yanchor = \"top\",\n    showarrow = FALSE,\n    font=list(size=16)\n  )\n)\n\nfig &lt;- fig |&gt; layout(annotations = annotations)\nfig"
  },
  {
    "objectID": "dv1.html#this-is-a-bar-grapgh-for-comparison",
    "href": "dv1.html#this-is-a-bar-grapgh-for-comparison",
    "title": "Data Visualizations",
    "section": "This is a bar grapgh for Comparison",
    "text": "This is a bar grapgh for Comparison"
  },
  {
    "objectID": "dv1.html#tempo-of-beyoncé-and-taylor-swifts-songs-over-the-years",
    "href": "dv1.html#tempo-of-beyoncé-and-taylor-swifts-songs-over-the-years",
    "title": "Data Visualizations",
    "section": "Tempo of Beyoncé and Taylor Swift’s songs over the Years",
    "text": "Tempo of Beyoncé and Taylor Swift’s songs over the Years\n\n\nCode\n# Your filtering code\nyears_to_keep &lt;- c(2006, 2008, 2010, 2014, 2019, 2020, 2022)\nfiltered_df &lt;- subset(df, album_release_year %in% years_to_keep)\n\n # Aggregate tempo values by artist_name and album_release_year\n  agg_df &lt;- aggregate(tempo ~ artist_name + album_release_year, data = filtered_df, FUN = mean)\n  \n  # Create the animated bar plot\n  fig &lt;- plot_ly(agg_df,\n                 x = ~artist_name,\n                 y = ~tempo, \n                 color = ~artist_name, \n                 type = 'bar',\n                 frame = ~album_release_year, \n                 text = ~artist_name, \n                 hoverinfo = \"text\")\n  \n  # Add animation button and slider\n  fig &lt;- fig %&gt;% animation_button(\n    x = 1, xanchor = \"right\", y = 0, yanchor = \"bottom\"\n  )\n  fig &lt;- fig %&gt;% animation_slider(\n    currentvalue = list(prefix = \"YEAR \", font = list(color=\"red\"))\n  )\n  \n  # Add title, x-axis label, and y-axis label\nfig &lt;- fig %&gt;% layout(\n  title = \"Tempo of Beyoncé and Taylor Swift’s songs over the Years\",\n  xaxis = list(title = \"Album Release Year\"),\n  yaxis = list(title = \"Tempo\")\n)\n\n  fig"
  },
  {
    "objectID": "dv1.html#number-of-albums-released-eached-year-by-each-artist",
    "href": "dv1.html#number-of-albums-released-eached-year-by-each-artist",
    "title": "Data Visualizations",
    "section": "Number of Albums released eached Year by each Artist",
    "text": "Number of Albums released eached Year by each Artist"
  },
  {
    "objectID": "dv1.html#most-frequently-used-words-in-track-names",
    "href": "dv1.html#most-frequently-used-words-in-track-names",
    "title": "Data Visualizations",
    "section": "Most frequently used words in track names",
    "text": "Most frequently used words in track names\n\n\nCode\nlibrary(dplyr)\nlibrary(wordcloud2)\nlibrary(tidyr)\nlibrary(tidytext)\n\n\ndf2&lt;-df\n\n\n# Remove \"(Taylor's Version)\" from track names\ndf2$track_name &lt;- gsub(\"\\\\(Taylor's Version\\\\)|Taylor’s Version|\\\\(From The Vault\\\\)\", \"\", df2$track_name)\n\n# Print cleaned track names\nhead(df2)\n\n\n  X  artist_name Valence danceability energy loudness speechiness acousticness\n1 1 Taylor Swift   0.685        0.757  0.610   -4.840      0.0327     0.009420\n2 2 Taylor Swift   0.701        0.733  0.733   -5.376      0.0670     0.088500\n3 3 Taylor Swift   0.305        0.511  0.822   -4.785      0.0397     0.000421\n4 4 Taylor Swift   0.206        0.545  0.885   -5.968      0.0447     0.000537\n5 5 Taylor Swift   0.520        0.588  0.721   -5.579      0.0317     0.000656\n6 6 Taylor Swift   0.917        0.636  0.808   -5.693      0.0729     0.012100\n  liveness   tempo                  track_name                       album_name\n1   0.3670 116.998        Welcome To New York  1989 (Taylor's Version) [Deluxe]\n2   0.1680  96.057                Blank Space  1989 (Taylor's Version) [Deluxe]\n3   0.0899  94.868                      Style  1989 (Taylor's Version) [Deluxe]\n4   0.3850  92.021           Out Of The Woods  1989 (Taylor's Version) [Deluxe]\n5   0.1310  96.997 All You Had To Do Was Stay  1989 (Taylor's Version) [Deluxe]\n6   0.3590 160.058               Shake It Off  1989 (Taylor's Version) [Deluxe]\n  album_release_year\n1               2023\n2               2023\n3               2023\n4               2023\n5               2023\n6               2023\n\n\nCode\n# Filter data for Taylor Swift and Beyoncé\ntaylor_swift_data &lt;- df2 %&gt;% \n  filter(artist_name == \"Taylor Swift\")\n\nbeyonce_data &lt;- df2 %&gt;% \n  filter(artist_name == \"Beyoncé\")\n\n# Tokenize track names and count word frequencies for Taylor Swift\ntaylor_swift_word_freq &lt;- taylor_swift_data %&gt;%\n  unnest_tokens(word, track_name) %&gt;%\n  count(word) %&gt;%\n  arrange(desc(n))\n\n# Tokenize track names and count word frequencies for Beyoncé\nbeyonce_word_freq &lt;- beyonce_data %&gt;%\n  unnest_tokens(word, track_name) %&gt;%\n  count(word) %&gt;%\n  arrange(desc(n))"
  },
  {
    "objectID": "dv1.html#word-cloud-taylor-swift",
    "href": "dv1.html#word-cloud-taylor-swift",
    "title": "Data Visualizations",
    "section": "Word cloud Taylor Swift",
    "text": "Word cloud Taylor Swift\n\n\nCode\n# Create word clouds for Taylor Swift and Beyoncé\n# Words to be removed\nwords_to_remove &lt;- c(\"the\", \"this\", \"to\", \"is\", \"are\")\n\n# Filter out the words to be removed from your word frequency data\ntaylor_swift_word_freq_filtered &lt;- taylor_swift_word_freq[!taylor_swift_word_freq[,1] %in% words_to_remove, ]\n\n# Set up your word cloud parameters\nts_size &lt;- 1\nts_bg_color &lt;- \"white\"\nts_color &lt;- ifelse(taylor_swift_word_freq_filtered[, 2] &gt; 8, 'red', 'skyblue')\n\n# Convert your filtered data to a data frame\nts_data &lt;- as.data.frame(taylor_swift_word_freq_filtered)\nts_dataOut &lt;- ts_data[,1:2]\nnames(ts_dataOut) &lt;- c(\"name\", \"freq\")\n\n# Calculate weight factor\nweightFactor &lt;- ts_size * 180 / max(ts_dataOut$freq)\n\n# Define hover function and widget size\nhoverFunction &lt;- NULL\nwidgetsize &lt;- NULL\n\n# Set up word cloud settings\nts_settings &lt;- list(\n  word = ts_dataOut$name,\n  freq = ts_dataOut$freq,\n  fontFamily = 'Segoe UI',\n  fontWeight = 'bold',\n  color =  ts_color,\n  minSize =  0,\n  weightFactor = weightFactor,\n  backgroundColor = ts_bg_color,\n  gridSize =  0,\n  minRotation = -pi/4,\n  maxRotation = pi/4,\n  shuffle = TRUE,\n  rotateRatio = 0.4,\n  shape = 'circle',\n  ellipticity = 0.65,\n  figBase64 = NULL,\n  hover = htmlwidgets::JS(hoverFunction)\n)\n\n# Create the word cloud\nhtmlwidgets::createWidget(\"wordcloud2\", ts_settings,\n                          width = widgetsize[1],\n                          height = widgetsize[2],\n                          sizingPolicy = htmlwidgets::sizingPolicy(\n                            viewer.padding = 0,\n                            browser.padding = 0,\n                            browser.fill = TRUE\n                          ))"
  },
  {
    "objectID": "dv1.html#word-cloud-beyonce",
    "href": "dv1.html#word-cloud-beyonce",
    "title": "Data Visualizations",
    "section": "Word cloud Beyonce",
    "text": "Word cloud Beyonce\n\n\nCode\n#wc2_beyonce &lt;- wordcloud2(beyonce_word_freq, size = 1, backgroundColor = \"white\", color = ifelse(beyonce_word_freq[, 2] &gt; 8, 'purple', 'green'))\n#wordcloud2::wordcloud2Output(\"wcb\", width=\"100%\", height = \"400px\")\n#wordcloud2::renderWordcloud2(wc2_beyonce)\n#wc2_beyonce\n# Words to be removed\nwords_to_remove &lt;- c(\"on\", \"the\", \"in\")\n\n# Filter out the words to be removed from your word frequency data\nbeyonce_word_freq_filtered &lt;- beyonce_word_freq[!beyonce_word_freq[,1] %in% words_to_remove, ]\n\n# Set up your word cloud parameters\nb_size &lt;- 1\nb_bg_color &lt;- \"white\"\nts_color &lt;- ifelse(beyonce_word_freq_filtered[, 2] &gt; 8, 'purple', 'green')\n\n# Convert your filtered data to a data frame\nb_data &lt;- as.data.frame(beyonce_word_freq_filtered)\nb_dataOut &lt;- b_data[,1:2]\nnames(b_dataOut) &lt;- c(\"name\", \"freq\")\n\n# Calculate weight factor\nb_weightFactor &lt;- b_size * 180 / max(b_dataOut$freq)\n\n# Define hover function and widget size\nhoverFunction &lt;- NULL\nwidgetsize &lt;- NULL\n\n# Set up word cloud settings\nb_settings &lt;- list(\n  word = b_dataOut$name,\n  freq = b_dataOut$freq,\n  fontFamily = 'Segoe UI',\n  fontWeight = 'bold',\n  color =  ts_color,\n  minSize =  0,\n  weightFactor = b_weightFactor,\n  backgroundColor = b_bg_color,\n  gridSize =  0,\n  minRotation = -pi/4,\n  maxRotation = pi/4,\n  shuffle = TRUE,\n  rotateRatio = 0.4,\n  shape = 'circle',\n  ellipticity = 0.65,\n  figBase64 = NULL,\n  hover = htmlwidgets::JS(hoverFunction)\n)\n\n# Create the word cloud\nhtmlwidgets::createWidget(\"wordcloud2\", b_settings,\n                          width = widgetsize[1],\n                          height = widgetsize[2],\n                          sizingPolicy = htmlwidgets::sizingPolicy(\n                            viewer.padding = 0,\n                            browser.padding = 0,\n                            browser.fill = TRUE\n                          ))\n\n\n\n\n\n\n\n\nCode\n## Word cloud Beyonce - A different way to obtain wordcloud\n\n\nlibrary(wordcloud)\n\n# Assuming taylor_swift_word_freq is a data frame with two columns: word and n\n\n# Create a color palette based on frequencies\npal &lt;- colorRampPalette(c(\"skyblue\", \"purple\"))(length(unique(beyonce_word_freq$n)))\n\n# Create a word cloud with custom colors\nwordcloud(words = beyonce_word_freq$word,\n          freq =beyonce_word_freq$n,\n          scale = c(12, 0.05),\n          random.order = FALSE,\n          random.color = FALSE,\n          rot.per = 0.25,\n          colors = pal)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Storytelling with Spotify Data",
    "section": "",
    "text": "By using data, you can paint a clearer picture of what’s happening and help others understand the story behind the numbers. It’s like being a detective, piecing together clues (or data points) to reveal the bigger picture. So, data storytelling is all about taking raw data and turning it into a story that anyone can understand, helping to convey messages and insights in a compelling and easy-to-follow way."
  },
  {
    "objectID": "index.html#taylor-swift",
    "href": "index.html#taylor-swift",
    "title": "Data Storytelling with Spotify Data",
    "section": "Taylor Swift",
    "text": "Taylor Swift\nTaylor Alison Swift is an American singer-songwriter who was born on December 13, 1989. She is known for her narrative songs about her personal life and has sold more than 50 million albums. (Reference)\nSwift has released nine studio albums, including Lover (2019), reputation (2017), Midnights (2022), and folklore (2020). She has won 11 Grammys and broken 58 Guinness World Records. In 2023, Bloomberg estimated Swift’s net worth at $1.1 billion, making her one of the world’s richest self-made women.(Reference1, Reference2)"
  },
  {
    "objectID": "index.html#beyoncé",
    "href": "index.html#beyoncé",
    "title": "Data Storytelling with Spotify Data",
    "section": "Beyoncé",
    "text": "Beyoncé\nBeyoncé Giselle Knowles-Carter (41 years old) is an American singer, songwriter, actress, and businesswoman. She was born in Houston, Texas on September 4, 1981. Beyoncé is known as “Queen Bey” and is considered a cultural figure of the 21st century. She first became famous in the late 1990s as the lead singer of the R&B group Destiny’s Child. She has since launched a successful solo career and has won 32 Grammy Awards. (Reference1, Reference2)\nBeyoncé is known for inventing the staccato rap-singing style, which is now popular in pop, R&B, and rap music. She has released 44 albums, including Beyoncé, Renaissance, and Dangerously in Love. Some of her songs include “Halo”, “Crazy in Love”, and “Single Ladies (Put a Ring on It)”. (Reference)"
  },
  {
    "objectID": "wd.html",
    "href": "wd.html",
    "title": "wordcloud",
    "section": "",
    "text": "Code\ndf5&lt;-read.csv(\"Artists_TS_B.csv\") #df\\$album_release_year\\&lt;-as.Date(\"%y\")\n\ndf5$artist_name&lt;-as.factor(df5$artist_name)\n\ndf&lt;-df5\n\n#p&lt;-ggplot(df5, aes(x = danceability, y = speechiness, color = artist_name)) + geom_point() + ggtitle(\"Wages and Services by industry in the US\")\n\n#ggplotly(p)\nCode\nlibrary(dplyr)\nlibrary(wordcloud2)\nlibrary(tidyr)\nlibrary(tidytext)\n\n# Assuming df is your dataframe\n\n# Filter data for Taylor Swift and Beyoncé\ntaylor_swift_data &lt;- df %&gt;% \n  filter(artist_name == \"Taylor Swift\")\n\nbeyonce_data &lt;- df %&gt;% \n  filter(artist_name == \"Beyoncé\")\n\n# Tokenize track names and count word frequencies for Taylor Swift\ntaylor_swift_word_freq &lt;- taylor_swift_data %&gt;%\n  unnest_tokens(word, track_name) %&gt;%\n  count(word) %&gt;%\n  arrange(desc(n))\n\n# Tokenize track names and count word frequencies for Beyoncé\nbeyonce_word_freq &lt;- beyonce_data %&gt;%\n  unnest_tokens(word, track_name) %&gt;%\n  count(word) %&gt;%\n  arrange(desc(n))\nCode\nfig2&lt;-wordcloud2(beyonce_word_freq, size = 1, backgroundColor = \"white\", color = ifelse(beyonce_word_freq[, 2] &gt; 8, 'purple', 'green'))\nfig2"
  },
  {
    "objectID": "wd.html#word-cloud-taylor-swift",
    "href": "wd.html#word-cloud-taylor-swift",
    "title": "wordcloud",
    "section": "Word cloud Taylor Swift",
    "text": "Word cloud Taylor Swift\n\n\nCode\n# Create word clouds for Taylor Swift and Beyoncé\nfig1&lt;-wordcloud2(taylor_swift_word_freq, size = 1, backgroundColor = \"white\", color = ifelse(taylor_swift_word_freq[, 2] &gt; 8, 'red', 'skyblue'))\nfig1"
  }
]