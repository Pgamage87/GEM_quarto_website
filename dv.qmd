---
title: "Data Visualizations"
---

```{r, message=FALSE, warning=FALSE,echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa) 
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(imputeTS)
library(gridExtra)
library(reticulate)
library(readxl)
use_python("/usr/local/bin/python3", require = T)
knitr::knit_engines$set(python = reticulate::eng_python)
#py_install("tensorflow")
```

## Data

This data is downloaded using Spotify API.

![](s1.png) ![](b1.png)\

## Spotify Audio Features

For every track on their platform, Spotify provides data for thirteen Audio Features.The Spotify Web API developer guide<https://developer.spotify.com/discover/> defines them as follows:

`Danceability`: Describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity.

`Valence`: Describes the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).

`Energy`: Represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale.

`Tempo`: The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece, and derives directly from the average beat duration.

`Loudness`: The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks.

`speechiness`: This detects the presence of spoken words in a track. The more exclusively instrum-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value.

`Instrumentalness`: Predicts whether a track contains no vocals. “Ooh” and “aah” sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly “vocal”.

`Liveness`: Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live.

`Acousticness`: A confidence measure from 0.0 to 1.0 of whether the track is acoustic.

`Key`: The estimated overall key of the track. Integers map to pitches using standard Pitch Class notation . E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on.

`Mode`: Indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.

`Duration`: The duration of the track in milliseconds.

`Time Signature`: An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).

## Data Visualizations

```{r}
#| warning: false
#| code-fold: true


df5<-read.csv("Artists_TS_B.csv") #df\$album_release_year\<-as.Date("%y")

df5$artist_name<-as.factor(df5$artist_name)

df<-df5

#p<-ggplot(df5, aes(x = danceability, y = speechiness, color = artist_name)) + geom_point() + ggtitle("Wages and Services by industry in the US")

#ggplotly(p)
```

## Music properties of Beyoncé and Taylor Swift's songs

```{r}
#| warning: false
#| code-fold: true

# Aggregate data to get average values for each year and artist
agg_df <- aggregate(cbind(danceability, speechiness, acousticness, liveness) ~ album_release_year + artist_name, data = df, FUN = mean)

# Define custom colors for Beyoncé and Taylor Swift
custom_colors <- c("Beyoncé" = "blue", "Taylor Swift" = "red")

# Plot danceability bubble chart
fig1 <- plot_ly(agg_df, x = ~album_release_year, y = ~danceability, 
                size = ~danceability,
                color = ~artist_name, 
                type = 'scatter', mode = 'markers', 
                marker = list(sizemode = 'diameter', sizeref = 1.6),
                colors = custom_colors,
                legendgroup = ~artist_name ,
                showlegend = FALSE
  ) |>
  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE))



# Plot speechiness bubble chart
fig2 <- plot_ly(agg_df, x = ~album_release_year, y = ~speechiness, 
                size = ~speechiness, color = ~artist_name, 
                type = 'scatter', mode = 'markers', 
                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), 
                colors = custom_colors, legendgroup = ~artist_name,
                showlegend = FALSE) |>
  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE)) 

# Plot acousticness bubble chart
fig3 <- plot_ly(agg_df, x = ~album_release_year, y =  ~acousticness, 
                size = ~acousticness, color = ~artist_name, 
                type = 'scatter', mode = 'markers', 
                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), 
                colors = custom_colors,
                legendgroup = ~artist_name,
                showlegend = FALSE
  ) |>
  layout(xaxis = list(showgrid = FALSE, zeroline=FALSE),yaxis = list(showgrid = FALSE, zeroline=FALSE)) 

# Plot liveness bubble chart
fig4 <- plot_ly(agg_df, x = ~album_release_year, y = ~liveness, 
                size = ~liveness, color = ~artist_name, 
                type = 'scatter', mode = 'markers', 
                marker = list(sizemode = 'diameter', sizeref = 1.6, line = list(width = 2)), 
                colors = custom_colors,
                legendgroup = ~artist_name,
                showlegend = TRUE
  ) |>
  layout(xaxis = list(showgrid = FALSE),yaxis = list(showgrid = FALSE)) 

# Combine subplots
#subplot(fig1, fig2, fig3, fig4, nrows = 2, shareX = TRUE)

# fig <- make_subplots(rows=2,
#                     cols=2,
#                     #print_grid=True,
#                     vertical_spacing=0.1,
#                     horizontal_spacing=0.085,
#                     x_title='Your master x-title',
#                     y_title='Your master y-title')

fig <- subplot(fig1, fig2, fig3, fig4, nrows = 2, shareX=TRUE, titleX=FALSE)

#fig <- subplot(fig1, fig2, nrows=2, shareX = TRUE, showlegend=TRUE)
#%>% layout(title = "Average Music Properties of Beyoncé and Taylor Swift's Songs")

annotations <- list(
  list(
    x = 0.2,
    y = 1.0,
    text = "Danceability",
    xref = "paper",
    yref = "paper",
    xanchor = "center",
    yanchor = "bottom",
    showarrow = FALSE
  ),
  list(
    x = 0.8,
    y = 1,
    text = "Speechiness",
    xref = "paper",
    yref = "paper",
    xanchor = "center",
    yanchor = "bottom",
    showarrow = FALSE
  ),
  list(
    x = 0.2,
    y = 0.45,
    text = "Acousticness",
    xref = "paper",
    yref = "paper",
    xanchor = "center",
    yanchor = "bottom",
    showarrow = FALSE
  ),
  list(
    x = 0.8,
    y = 0.45,
    text = "Liveness",
    xref = "paper",
    yref = "paper",
    xanchor = "center",
    yanchor = "bottom",
    showarrow = FALSE
  ),
  list(
    x=0.5,
    y=-0.035,
    text="Release Year",
    xref = "paper",
    yref = "paper",
    xanchor = "bottom",
    yanchor = "top",
    showarrow = FALSE,
    font=list(size=16)
  )
)

fig <- fig |> layout(annotations = annotations)
fig 

```

## This is a bar grapgh for Comparison

::: {#viz1708910755108 .tableauPlaceholder style="position: relative"}
<noscript> <a href='#'> <img src="https://public.tableau.com/static/images/TS/TS_B2/Dashboard1/1_rss.png" alt="Dashboard 1" style="border: none;"/> </a> </noscript> <object class='tableauViz' style='display:none;'> <param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /> <param name='name' value='TS_B2/Dashboard1' /> <param name='tabs' value='no' /> <param name='toolbar' value='yes' /> <param name='static_image' value='https://public.tableau.com/static/images/TS/TS_B2/Dashboard1/1.png' /> <param name='animate_transition' value='yes' /> <param name='display_static_image' value='yes' /> <param name='display_spinner' value='yes' /> <param name='display_overlay' value='yes' /> <param name='display_count' value='yes' /> <param name='language' value='en-US' /> <param name='filter' value='publish=yes' /> </object>
:::

```{=html}
<script type='text/javascript'>
  var divElement = document.getElementById('viz1708910755108');
  var vizElement = divElement.getElementsByTagName('object')[0];
  if (divElement.offsetWidth > 800) {
    vizElement.style.width = '1000px';
    vizElement.style.height = '827px';
  } else if (divElement.offsetWidth > 500) {
    vizElement.style.width = '1000px';
    vizElement.style.height = '827px';
  } else {
    vizElement.style.width = '100%';
    vizElement.style.height = '727px';
  }
  var scriptElement = document.createElement('script');
  scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';
  vizElement.parentNode.insertBefore(scriptElement, vizElement);
</script>
```
## Tempo of Beyoncé and Taylor Swift's songs over the Years

```{r}
#| warning: false
#| code-fold: true

# Your filtering code
years_to_keep <- c(2006, 2008, 2010, 2014, 2019, 2020, 2022)
filtered_df <- subset(df, album_release_year %in% years_to_keep)

 # Aggregate tempo values by artist_name and album_release_year
  agg_df <- aggregate(tempo ~ artist_name + album_release_year, data = filtered_df, FUN = mean)
  
  # Create the animated bar plot
  fig <- plot_ly(agg_df,
                 x = ~artist_name,
                 y = ~tempo, 
                 color = ~artist_name, 
                 type = 'bar',
                 frame = ~album_release_year, 
                 text = ~artist_name, 
                 hoverinfo = "text")
  
  # Add animation button and slider
  fig <- fig %>% animation_button(
    x = 1, xanchor = "right", y = 0, yanchor = "bottom"
  )
  fig <- fig %>% animation_slider(
    currentvalue = list(prefix = "YEAR ", font = list(color="red"))
  )
  
  # Add title, x-axis label, and y-axis label
fig <- fig %>% layout(
  title = "Tempo of Beyoncé and Taylor Swift’s songs over the Years",
  xaxis = list(title = "Album Release Year"),
  yaxis = list(title = "Tempo")
)

  fig
  
```

## Number of Albums released eached Year by each Artist

::: {#viz1708909591694 .tableauPlaceholder style="position: relative;"}
<noscript><a href="#"><img src="https://public.tableau.com/static/images/TS/TS_B2/Dashboard2/1_rss.png" alt="Dashboard 2" style="border: none;"/></a></noscript> <object class="tableauViz" style="display:none;"> <param name="host_url" value="https%3A%2F%2Fpublic.tableau.com%2F" /> <param name="embed_code_version" value="3" /> <param name="site_root" value="" /> <param name="name" value="TS_B2/Dashboard2" /> <param name="tabs" value="no" /> <param name="toolbar" value="yes" /> <param name="static_image" value="https://public.tableau.com/static/images/TS/TS_B2/Dashboard2/1.png" /> <param name="animate_transition" value="yes" /> <param name="display_static_image" value="yes" /> <param name="display_spinner" value="yes" /> <param name="display_overlay" value="yes" /> <param name="display_count" value="yes" /> <param name="language" value="en-US" /> <param name="filter" value="publish=yes" /> </object>
:::

```{=html}
<script>
  var divElement = document.getElementById('viz1708909591694');
  var vizElement = divElement.getElementsByTagName('object')[0];
  if (divElement.offsetWidth > 800) {
    vizElement.style.width = '1000px';
    vizElement.style.height = '827px';
  } else if (divElement.offsetWidth > 500) {
    vizElement.style.width = '1000px';
    vizElement.style.height = '827px';
  } else {
    vizElement.style.width = '100%';
    vizElement.style.height = '727px';
  }
  var scriptElement = document.createElement('script');
  scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';
  vizElement.parentNode.insertBefore(scriptElement, vizElement);
</script>
```
## Most frequently used words in track names

```{r}
#| warning: false
#| code-fold: true


library(dplyr)
library(wordcloud2)
library(tidyr)
library(tidytext)


df2<-df


# Remove "(Taylor's Version)" from track names
df2$track_name <- gsub("\\(Taylor's Version\\)|Taylor’s Version|\\(From The Vault\\)", "", df2$track_name)

# Print cleaned track names
head(df2)

# Filter data for Taylor Swift and Beyoncé
taylor_swift_data <- df2 %>% 
  filter(artist_name == "Taylor Swift")

beyonce_data <- df2 %>% 
  filter(artist_name == "Beyoncé")

# Tokenize track names and count word frequencies for Taylor Swift
taylor_swift_word_freq <- taylor_swift_data %>%
  unnest_tokens(word, track_name) %>%
  count(word) %>%
  arrange(desc(n))

# Tokenize track names and count word frequencies for Beyoncé
beyonce_word_freq <- beyonce_data %>%
  unnest_tokens(word, track_name) %>%
  count(word) %>%
  arrange(desc(n))

```

## Word cloud Taylor Swift

```{r}
#| label: wc1
#| warning: false
#| code-fold: true
# Create word clouds for Taylor Swift and Beyoncé
# Words to be removed
words_to_remove <- c("the", "this", "to", "is", "are")

# Filter out the words to be removed from your word frequency data
taylor_swift_word_freq_filtered <- taylor_swift_word_freq[!taylor_swift_word_freq[,1] %in% words_to_remove, ]

# Set up your word cloud parameters
ts_size <- 1
ts_bg_color <- "white"
ts_color <- ifelse(taylor_swift_word_freq_filtered[, 2] > 8, 'red', 'skyblue')

# Convert your filtered data to a data frame
ts_data <- as.data.frame(taylor_swift_word_freq_filtered)
ts_dataOut <- ts_data[,1:2]
names(ts_dataOut) <- c("name", "freq")

# Calculate weight factor
weightFactor <- ts_size * 180 / max(ts_dataOut$freq)

# Define hover function and widget size
hoverFunction <- NULL
widgetsize <- NULL

# Set up word cloud settings
ts_settings <- list(
  word = ts_dataOut$name,
  freq = ts_dataOut$freq,
  fontFamily = 'Segoe UI',
  fontWeight = 'bold',
  color =  ts_color,
  minSize =  0,
  weightFactor = weightFactor,
  backgroundColor = ts_bg_color,
  gridSize =  0,
  minRotation = -pi/4,
  maxRotation = pi/4,
  shuffle = TRUE,
  rotateRatio = 0.4,
  shape = 'circle',
  ellipticity = 0.65,
  figBase64 = NULL,
  hover = htmlwidgets::JS(hoverFunction)
)

# Create the word cloud
htmlwidgets::createWidget("wordcloud2", ts_settings,
                          width = widgetsize[1],
                          height = widgetsize[2],
                          sizingPolicy = htmlwidgets::sizingPolicy(
                            viewer.padding = 0,
                            browser.padding = 0,
                            browser.fill = TRUE
                          ))

```

## Word cloud Beyonce

```{r}
#| label: wc2
#| warning: false
#| code-fold: true
#wc2_beyonce <- wordcloud2(beyonce_word_freq, size = 1, backgroundColor = "white", color = ifelse(beyonce_word_freq[, 2] > 8, 'purple', 'green'))
#wordcloud2::wordcloud2Output("wcb", width="100%", height = "400px")
#wordcloud2::renderWordcloud2(wc2_beyonce)
#wc2_beyonce
# Words to be removed
words_to_remove <- c("on", "the", "in")

# Filter out the words to be removed from your word frequency data
beyonce_word_freq_filtered <- beyonce_word_freq[!beyonce_word_freq[,1] %in% words_to_remove, ]

# Set up your word cloud parameters
b_size <- 1
b_bg_color <- "white"
ts_color <- ifelse(beyonce_word_freq_filtered[, 2] > 8, 'purple', 'green')

# Convert your filtered data to a data frame
b_data <- as.data.frame(beyonce_word_freq_filtered)
b_dataOut <- b_data[,1:2]
names(b_dataOut) <- c("name", "freq")

# Calculate weight factor
b_weightFactor <- b_size * 180 / max(b_dataOut$freq)

# Define hover function and widget size
hoverFunction <- NULL
widgetsize <- NULL

# Set up word cloud settings
b_settings <- list(
  word = b_dataOut$name,
  freq = b_dataOut$freq,
  fontFamily = 'Segoe UI',
  fontWeight = 'bold',
  color =  ts_color,
  minSize =  0,
  weightFactor = b_weightFactor,
  backgroundColor = b_bg_color,
  gridSize =  0,
  minRotation = -pi/4,
  maxRotation = pi/4,
  shuffle = TRUE,
  rotateRatio = 0.4,
  shape = 'circle',
  ellipticity = 0.65,
  figBase64 = NULL,
  hover = htmlwidgets::JS(hoverFunction)
)

# Create the word cloud
htmlwidgets::createWidget("wordcloud2", b_settings,
                          width = widgetsize[1],
                          height = widgetsize[2],
                          sizingPolicy = htmlwidgets::sizingPolicy(
                            viewer.padding = 0,
                            browser.padding = 0,
                            browser.fill = TRUE
                          ))

```

```{r, eval=FALSE}
#| warning: false
#| code-fold: true

## Word cloud Beyonce - A different way to obtain wordcloud


library(wordcloud)

# Assuming taylor_swift_word_freq is a data frame with two columns: word and n

# Create a color palette based on frequencies
pal <- colorRampPalette(c("skyblue", "purple"))(length(unique(beyonce_word_freq$n)))

# Create a word cloud with custom colors
wordcloud(words = beyonce_word_freq$word,
          freq =beyonce_word_freq$n,
          scale = c(12, 0.05),
          random.order = FALSE,
          random.color = FALSE,
          rot.per = 0.25,
          colors = pal)

```
